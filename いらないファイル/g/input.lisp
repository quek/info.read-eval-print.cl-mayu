;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant _IOC_NRBITS 8)

(cl:defconstant _IOC_TYPEBITS 8)

(cl:defconstant _IOC_SIZEBITS 14)

(cl:defconstant _IOC_DIRBITS 2)

(cl:defconstant _IOC_NRMASK (cl:- (cl:ash 1 8) 1))

(cl:defconstant _IOC_TYPEMASK (cl:- (cl:ash 1 8) 1))

(cl:defconstant _IOC_SIZEMASK (cl:- (cl:ash 1 14) 1))

(cl:defconstant _IOC_DIRMASK (cl:- (cl:ash 1 2) 1))

(cl:defconstant _IOC_NRSHIFT 0)

(cl:defconstant _IOC_TYPESHIFT (cl:+ 0 8))

(cl:defconstant _IOC_SIZESHIFT (cl:+ (0 8) 8))

(cl:defconstant _IOC_DIRSHIFT (cl:+ ((0 8) 8) 14))

(cl:defconstant _IOC_NONE 0)

(cl:defconstant _IOC_WRITE 1)

(cl:defconstant _IOC_READ 2)

(cl:defconstant IOC_IN (cl:+ 1 << (((0 8) 8) 14)))

(cl:defconstant IOC_OUT (cl:+ 2 << (((0 8) 8) 14)))

(cl:defconstant IOC_INOUT (cl:logior (1U (cl:+ 2) << (((0 8) 8) 14))))

(cl:defconstant IOCSIZE_MASK (cl:+ (cl:- (1 << 14 1) << ((0) 8) 8)))

(cl:defconstant IOCSIZE_SHIFT (cl:+ ((0 8) 8)))

(cffi:defcstruct input_event
	(time :pointer)
	(type :pointer)
	(code :pointer)
	(value :pointer))

(cl:defconstant EV_VERSION #x010001)

(cffi:defcstruct input_id
	(bustype :pointer)
	(vendor :pointer)
	(product :pointer)
	(version :pointer))

(cffi:defcstruct input_absinfo
	(value :pointer)
	(minimum :pointer)
	(maximum :pointer)
	(fuzz :pointer)
	(flat :pointer)
	(resolution :pointer))

(cffi:defcstruct input_keymap_entry
	(flags :pointer)
	(len :pointer)
	(index :pointer)
	(keycode :pointer)
	(scancode :pointer :count 32))

(cffi:defcstruct input_mask
	(type :pointer)
	(codes_size :pointer)
	(codes_ptr :pointer))

(cl:defconstant ID_BUS 0)

(cl:defconstant ID_VENDOR 1)

(cl:defconstant ID_PRODUCT 2)

(cl:defconstant ID_VERSION 3)

(cl:defconstant BUS_PCI #x01)

(cl:defconstant BUS_ISAPNP #x02)

(cl:defconstant BUS_USB #x03)

(cl:defconstant BUS_HIL #x04)

(cl:defconstant BUS_BLUETOOTH #x05)

(cl:defconstant BUS_VIRTUAL #x06)

(cl:defconstant BUS_ISA #x10)

(cl:defconstant BUS_I8042 #x11)

(cl:defconstant BUS_XTKBD #x12)

(cl:defconstant BUS_RS232 #x13)

(cl:defconstant BUS_GAMEPORT #x14)

(cl:defconstant BUS_PARPORT #x15)

(cl:defconstant BUS_AMIGA #x16)

(cl:defconstant BUS_ADB #x17)

(cl:defconstant BUS_I2C #x18)

(cl:defconstant BUS_HOST #x19)

(cl:defconstant BUS_GSC #x1A)

(cl:defconstant BUS_ATARI #x1B)

(cl:defconstant BUS_SPI #x1C)

(cl:defconstant BUS_RMI #x1D)

(cl:defconstant BUS_CEC #x1E)

(cl:defconstant BUS_INTEL_ISHTP #x1F)

(cl:defconstant MT_TOOL_FINGER 0)

(cl:defconstant MT_TOOL_PEN 1)

(cl:defconstant MT_TOOL_PALM 2)

(cl:defconstant MT_TOOL_MAX 2)

(cl:defconstant FF_STATUS_STOPPED #x00)

(cl:defconstant FF_STATUS_PLAYING #x01)

(cl:defconstant FF_STATUS_MAX #x01)

(cffi:defcstruct ff_replay
	(length :pointer)
	(delay :pointer))

(cffi:defcstruct ff_trigger
	(button :pointer)
	(interval :pointer))

(cffi:defcstruct ff_envelope
	(attack_length :pointer)
	(attack_level :pointer)
	(fade_length :pointer)
	(fade_level :pointer))

(cffi:defcstruct ff_constant_effect
	(level :pointer)
	(envelope ff_envelope))

(cffi:defcstruct ff_ramp_effect
	(start_level :pointer)
	(end_level :pointer)
	(envelope ff_envelope))

(cffi:defcstruct ff_condition_effect
	(right_saturation :pointer)
	(left_saturation :pointer)
	(right_coeff :pointer)
	(left_coeff :pointer)
	(deadband :pointer)
	(center :pointer))

(cffi:defcstruct ff_periodic_effect
	(waveform :pointer)
	(period :pointer)
	(magnitude :pointer)
	(offset :pointer)
	(phase :pointer)
	(envelope ff_envelope)
	(custom_len :pointer)
	(custom_data :pointer))

(cffi:defcstruct ff_rumble_effect
	(strong_magnitude :pointer)
	(weak_magnitude :pointer))

(cffi:defcstruct ff_effect
	(type :pointer)
	(id :pointer)
	(direction :pointer)
	(trigger ff_trigger)
	(replay ff_replay)
	(u :pointer))

(cffi:defcunion ff_effect_u
	(constant ff_constant_effect)
	(ramp ff_ramp_effect)
	(periodic ff_periodic_effect)
	(condition :pointer :count 2)
	(rumble ff_rumble_effect))

(cl:defconstant FF_RUMBLE #x50)

(cl:defconstant FF_PERIODIC #x51)

(cl:defconstant FF_CONSTANT #x52)

(cl:defconstant FF_SPRING #x53)

(cl:defconstant FF_FRICTION #x54)

(cl:defconstant FF_DAMPER #x55)

(cl:defconstant FF_INERTIA #x56)

(cl:defconstant FF_RAMP #x57)

(cl:defconstant FF_EFFECT_MIN #x50)

(cl:defconstant FF_EFFECT_MAX #x57)

(cl:defconstant FF_SQUARE #x58)

(cl:defconstant FF_TRIANGLE #x59)

(cl:defconstant FF_SINE #x5a)

(cl:defconstant FF_SAW_UP #x5b)

(cl:defconstant FF_SAW_DOWN #x5c)

(cl:defconstant FF_CUSTOM #x5d)

(cl:defconstant FF_WAVEFORM_MIN #x58)

(cl:defconstant FF_WAVEFORM_MAX #x5d)

(cl:defconstant FF_GAIN #x60)

(cl:defconstant FF_AUTOCENTER #x61)

(cl:defconstant FF_MAX_EFFECTS #x60)

(cl:defconstant FF_MAX #x7f)

(cl:defconstant FF_CNT (cl:+ #x7f 1))


